<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangsir&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangwanchao.wang/"/>
  <updated>2020-01-16T06:43:37.556Z</updated>
  <id>http://wangwanchao.wang/</id>
  
  <author>
    <name>wanchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>thinking-in-2020</title>
    <link href="http://wangwanchao.wang/2020/01/16/thinking-in-2020/"/>
    <id>http://wangwanchao.wang/2020/01/16/thinking-in-2020/</id>
    <published>2020-01-16T06:43:37.000Z</published>
    <updated>2020-01-16T06:43:37.556Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>oracle-login</title>
    <link href="http://wangwanchao.wang/2019/12/06/oracle-login/"/>
    <id>http://wangwanchao.wang/2019/12/06/oracle-login/</id>
    <published>2019-12-06T01:31:28.000Z</published>
    <updated>2019-12-06T01:31:28.411Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jvm日志分析</title>
    <link href="http://wangwanchao.wang/2019/11/14/java-jvm-gclog/"/>
    <id>http://wangwanchao.wang/2019/11/14/java-jvm-gclog/</id>
    <published>2019-11-14T06:41:46.000Z</published>
    <updated>2019-11-14T06:51:34.160Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><h3 id="Xmx"><a href="#Xmx" class="headerlink" title="-Xmx"></a>-Xmx</h3><h3 id="Xms"><a href="#Xms" class="headerlink" title="-Xms"></a>-Xms</h3><h3 id="Xmn"><a href="#Xmn" class="headerlink" title="-Xmn"></a>-Xmn</h3><h3 id="XX-PrintGC-XX-PrintGCDetails"><a href="#XX-PrintGC-XX-PrintGCDetails" class="headerlink" title="-XX:+PrintGC / -XX:+PrintGCDetails"></a>-XX:+PrintGC / -XX:+PrintGCDetails</h3><p>-XX:+PrintHeapAtGC<br>-Xloggc 日志文件存放位置<br>-XX:+PrintGCDateStamps 打印每个年代对象分布情况<br>-XX:+PrintGCDateStamps / -XX:+PrintGCTimeStamps<br>-XX:+PrintGCApplicationStoppedTime<br>-XX:+PrintGCApplicationConcurrentTime 打印除了GC之外引起JVM STW的时间<br>-XX:+PrintSafepointStatistics<br>-XX:PrintSafepointStatisticsCount=1</p><h2 id="收集器特殊参数"><a href="#收集器特殊参数" class="headerlink" title="收集器特殊参数"></a>收集器特殊参数</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;通用参数&quot;&gt;&lt;a href=&quot;#通用参数&quot; class=&quot;headerlink&quot; title=&quot;通用参数&quot;&gt;&lt;/a&gt;通用参数&lt;/h2&gt;&lt;h3 id=&quot;Xmx&quot;&gt;&lt;a href=&quot;#Xmx&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java永久代、元数据区</title>
    <link href="http://wangwanchao.wang/2019/11/14/java-jvm-permgen/"/>
    <id>http://wangwanchao.wang/2019/11/14/java-jvm-permgen/</id>
    <published>2019-11-14T05:53:32.000Z</published>
    <updated>2019-11-14T06:33:19.891Z</updated>
    
    <content type="html"><![CDATA[<p>今天在维护一个jsp + tomcat的老项目中，开始使用JRE1.8运行，没有问题，切换到JRE1.7运行就报错:</p><pre><code>java.lang.OutOfMemoryError: PermGen space</code></pre><p>添加运行时参数<code>-XX:MaxPermSize=512m</code>解决问题，这里涉及到jvm运行时内存的变化。</p><a id="more"></a><h2 id="永久代-Perm-Gen"><a href="#永久代-Perm-Gen" class="headerlink" title="永久代 Perm Gen"></a>永久代 Perm Gen</h2><p>PermGen存在于<code>jdk1.7-</code>版本中，主要存储内容：</p><blockquote><p>class类的名称、字段、方法<br>字节码<br>常量池<br>对象数组/类型数组的class<br>JIT编译后的class信息</p></blockquote><h2 id="元数据区-Metaspace"><a href="#元数据区-Metaspace" class="headerlink" title="元数据区 Metaspace"></a>元数据区 Metaspace</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在维护一个jsp + tomcat的老项目中，开始使用JRE1.8运行，没有问题，切换到JRE1.7运行就报错:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java.lang.OutOfMemoryError: PermGen space
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加运行时参数&lt;code&gt;-XX:MaxPermSize=512m&lt;/code&gt;解决问题，这里涉及到jvm运行时内存的变化。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps软件架构师行动指南</title>
    <link href="http://wangwanchao.wang/2019/10/12/read-devops/"/>
    <id>http://wangwanchao.wang/2019/10/12/read-devops/</id>
    <published>2019-10-12T03:13:09.000Z</published>
    <updated>2019-10-12T03:17:17.403Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>瓶颈期</title>
    <link href="http://wangwanchao.wang/2019/10/09/thinking-in-bottleneck/"/>
    <id>http://wangwanchao.wang/2019/10/09/thinking-in-bottleneck/</id>
    <published>2019-10-09T02:46:07.000Z</published>
    <updated>2019-10-10T07:18:31.037Z</updated>
    
    <content type="html"><![CDATA[<p>这一段时间，我一直在思考的一个问题就是：我和别人到底差在哪里？我迷茫、困惑，陷入一个万劫不复的僵局，困在其中，却无法突破。也许这就是所谓的瓶颈期。</p><a id="more"></a><p>从去年开始，我一直待在教育这个行业。在大的方向上，我喜欢过两个行业–教育、文化，每一个都是那种真挚而热烈的喜欢。可让我困惑的是，竟然始终未找到自己真心热爱去创造的东西。我承认自己多多少少有点理想主义，但我真心希望能够做出让人惊艳的产品。<br>在这短短的时间里，我竟然一直换了好几份工作，辞职后的这段时间里，我在想为什么？</p><ol><li><p>某联科技<br>：你为什么离职？<br>：产品规划了一年，还是没有落地，而且方向越来越不明确</p></li><li><p>某德教育<br>：你为什么离职？<br>：你经历过女领导给你穿小鞋吗？公司新起的项目，前期一直没有一个统筹的领导，中间突然来了一个女产品，任产品总监，为了争夺权力，开始勾心斗角</p></li><li><p>某来教育<br>：你为什么离职？<br>我开始思考经历的一切，让我得出一下结论<br>：1、部门对接问题，你很难理解，在这样的公司，对接竟然一直存在问题，尤其是前期，两个系统并行开发， 就导致很多开发的内容需要不断的调整，更为恶心的是产品不画原型！我是从来没有经历过这种事情的，激情慢慢的消褪；2、同事的问题，中间内部对接的有一位同事是某理毕业，虽然我并非名校，但是一些经验上，明明是对的，她竟然为自己辩护，原来接受过高等教育的人也会这么不辨是非；3、领导的问题，一次述职，我觉得自己表达的虽然没有那么完美，但是过程中领导那种傲慢的姿态，还因为一个http状态码的问题问我看过RFC文档吗？实际上跟RFC没有任何关系</p></li><li><p>某浦教育<br>：你为什么离职？<br>：三个月内，同事换了好几波，公司文化氛围实在让人不理解</p></li></ol><p>有时候，我在想，是不是互联网产品注定了快速试水、快速迭代、最后快速消失？而当初那些怀着梦想–’代码改变世界’的人注定消失在人海？期间我甚至想过去当一个图书管理员，Linux毫无疑问是最伟大的软件，可如何用软件改变人们的生活？让我一直在问：make the world better or worse?</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一段时间，我一直在思考的一个问题就是：我和别人到底差在哪里？我迷茫、困惑，陷入一个万劫不复的僵局，困在其中，却无法突破。也许这就是所谓的瓶颈期。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://wangwanchao.wang/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Kong网关</title>
    <link href="http://wangwanchao.wang/2019/08/29/kong-base/"/>
    <id>http://wangwanchao.wang/2019/08/29/kong-base/</id>
    <published>2019-08-29T06:29:21.000Z</published>
    <updated>2020-01-16T07:09:58.641Z</updated>
    
    <content type="html"><![CDATA[<p>网关</p><a id="more"></a><h2 id="Centos7安装"><a href="#Centos7安装" class="headerlink" title="Centos7安装"></a>Centos7安装</h2><pre><code>yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</code></pre><p>如果配置了yum源，可以直接yum安装</p><h4 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h4><pre><code>sudo yum update -ysudo yum install -y wgetwget https://bintray.com/kong/kong-rpm/rpm -O bintray-kong-kong-rpm.repoexport major_version=`grep -oE &apos;[0-9]+\.[0-9]+&apos; /etc/redhat-release | cut -d &quot;.&quot; -f1`sed -i -e &apos;s/baseurl.*/&amp;\/centos\/&apos;$major_version&apos;&apos;/ bintray-kong-kong-rpm.reposudo mv bintray-kong-kong-rpm.repo /etc/yum.repos.d/sudo yum update -ysudo yum install -y kong</code></pre><h4 id="有数据库模式"><a href="#有数据库模式" class="headerlink" title="有数据库模式"></a>有数据库模式</h4><p>依赖于PostgreSQL</p><p>创建kong.conf</p><pre><code>cp /etc/kong/kong.conf.default /etc/kong/kong.conf</code></pre><p>报错：</p><ol><li><p>Error: [PostgreSQL error] failed to check legacy schema state: ERROR: function to_regclass(unknown) does not exist (12)</p><p>Run with –v (verbose) or –vv (debug) for more details<br>解决方案：postgresql版本不兼容问题，升级psql</p></li></ol><h4 id="无数据库模式"><a href="#无数据库模式" class="headerlink" title="无数据库模式"></a>无数据库模式</h4><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><h3 id="kong监控UI"><a href="#kong监控UI" class="headerlink" title="kong监控UI"></a>kong监控UI</h3><p>kong-dashboard</p><p>1、<br>2、重新启动报错：<br>kong-dashboard start –kong-url <a href="http://kong:8001" target="_blank" rel="noopener">http://kong:8001</a><br>Connecting to Kong on <a href="http://kong:8001" target="_blank" rel="noopener">http://kong:8001</a> …<br>Could not reach Kong on <a href="http://kong:8001" target="_blank" rel="noopener">http://kong:8001</a><br>Error details:<br>{ Error: getaddrinfo ENOTFOUND kong kong:8001<br>    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:56:26)<br>  errno: ‘ENOTFOUND’,<br>  code: ‘ENOTFOUND’,<br>  syscall: ‘getaddrinfo’,<br>  hostname: ‘kong’,<br>  host: ‘kong’,<br>  port: ‘8001’ }</p><h3 id="konga"><a href="#konga" class="headerlink" title="konga"></a>konga</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网关&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringCloud" scheme="http://wangwanchao.wang/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Serverless是什么</title>
    <link href="http://wangwanchao.wang/2019/08/16/serverless-base/"/>
    <id>http://wangwanchao.wang/2019/08/16/serverless-base/</id>
    <published>2019-08-16T01:15:50.000Z</published>
    <updated>2019-08-16T03:29:52.528Z</updated>
    
    <content type="html"><![CDATA[<p>Serverless是什么？很多地方看到serverless的文章，官方文档说：首先是一个框架。包含多个微服务的应用；事件响应，自动扩容；仅仅在运行时收费，更高于云服务平台。</p><a id="more"></a><p>从IaaS， 到SaaS，再到Paas。重新提出一种新的架构FaaS</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>阿里云也有在做，以下以AWS为例。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>中间需要用到AWS账号，没有账号的需要申请。</p><h3 id="创建AWS账号"><a href="#创建AWS账号" class="headerlink" title="创建AWS账号"></a>创建AWS账号</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Serverless是什么？很多地方看到serverless的文章，官方文档说：首先是一个框架。包含多个微服务的应用；事件响应，自动扩容；仅仅在运行时收费，更高于云服务平台。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud微服务--网关</title>
    <link href="http://wangwanchao.wang/2019/08/15/spring-cloud-zuul/"/>
    <id>http://wangwanchao.wang/2019/08/15/spring-cloud-zuul/</id>
    <published>2019-08-15T08:28:03.000Z</published>
    <updated>2019-09-09T02:22:07.793Z</updated>
    
    <content type="html"><![CDATA[<p>nginx、zuul、gateway、kong都是网管组件。</p><a id="more"></a><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>nginx使用漏桶算法</p><p><code>limit_req_zone</code><br><code>limit_req_conn</code></p><h3 id="限流-1"><a href="#限流-1" class="headerlink" title="限流"></a>限流</h3><h2 id="Zuul1-Zuul2"><a href="#Zuul1-Zuul2" class="headerlink" title="Zuul1 / Zuul2"></a>Zuul1 / Zuul2</h2><h3 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h3><p>按照生命周期大约有4种过滤器：</p><ol><li><p>pre </p></li><li><p>routing</p></li><li><p>post </p></li><li><p>error</p></li></ol><h3 id="限流-2"><a href="#限流-2" class="headerlink" title="限流"></a>限流</h3><p>主流的有4种限流方式：</p><ol><li>根据认证用户</li><li>根据原始请求</li><li>根据URL</li><li>根据ServiceId</li></ol><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>zuul-ratelimit</p><h2 id="Kong"><a href="#Kong" class="headerlink" title="Kong"></a>Kong</h2><p>kong可以说是nginx的升级版，基于OpenResty。</p><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><ol><li>upstream</li><li>target</li><li>service</li><li>route</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx、zuul、gateway、kong都是网管组件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot配置文件加载bug</title>
    <link href="http://wangwanchao.wang/2019/08/14/spring-boot-bootstrap/"/>
    <id>http://wangwanchao.wang/2019/08/14/spring-boot-bootstrap/</id>
    <published>2019-08-14T06:16:34.000Z</published>
    <updated>2019-08-14T06:26:57.152Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA环境以前曾经遇到过，通过添加依赖包可以解决，而且，创建的maven模块有时候正常，有时候出现该问题，问题的根本还是不太懂</p><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="未加载前"><a href="#未加载前" class="headerlink" title="未加载前"></a>未加载前</h3><p>bootstrap文件为yml格式，但是并未识别为配置文件</p><p><img src="https://impwang.oss-cn-beijing.aliyuncs.com/spring/springboot-bootstrap.png" alt></p><p>查看模块设置<code>Open Module Settings</code> - Module，发现并未自动检测，没有找到任何手动添加设置<br><img src="https://impwang.oss-cn-beijing.aliyuncs.com/spring/springboot-bootstrap2.png" alt></p><h3 id="加载后"><a href="#加载后" class="headerlink" title="加载后"></a>加载后</h3><p>添加spring-cloud-context，bootstrap文件可以被正常检测<br><img src="https://impwang.oss-cn-beijing.aliyuncs.com/spring/springboot-bootstrap3.png" alt></p><p>迷<br><img src="https://impwang.oss-cn-beijing.aliyuncs.com/spring/springboot-bootstrap4.png" alt></p><h2 id="加载原理"><a href="#加载原理" class="headerlink" title="加载原理"></a>加载原理</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA环境以前曾经遇到过，通过添加依赖包可以解决，而且，创建的maven模块有时候正常，有时候出现该问题，问题的根本还是不太懂&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>计算机网络--概览</title>
    <link href="http://wangwanchao.wang/2019/08/03/net-overview/"/>
    <id>http://wangwanchao.wang/2019/08/03/net-overview/</id>
    <published>2019-08-03T03:19:10.000Z</published>
    <updated>2019-08-03T03:20:26.796Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="NetWork" scheme="http://wangwanchao.wang/tags/NetWork/"/>
    
  </entry>
  
  <entry>
    <title>go--csp并发模型</title>
    <link href="http://wangwanchao.wang/2019/07/16/go-csp/"/>
    <id>http://wangwanchao.wang/2019/07/16/go-csp/</id>
    <published>2019-07-16T06:50:07.000Z</published>
    <updated>2019-07-16T07:24:26.909Z</updated>
    
    <content type="html"><![CDATA[<p>go引入了协程的概念，使用goroutine通过channel通信</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go引入了协程的概念，使用goroutine通过channel通信&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Consul环境</title>
    <link href="http://wangwanchao.wang/2019/07/03/consul-base/"/>
    <id>http://wangwanchao.wang/2019/07/03/consul-base/</id>
    <published>2019-07-03T01:33:02.000Z</published>
    <updated>2019-08-14T08:45:14.155Z</updated>
    
    <content type="html"><![CDATA[<p>原来一直用Eureka Server，现在尝试用Consul.</p><a id="more"></a><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>brew install consul</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code>consul agent -dev</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>管理页面地址 <a href="http://127.0.0.1:8500/ui/dc1/services" target="_blank" rel="noopener">http://127.0.0.1:8500/ui/dc1/services</a></p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原来一直用Eureka Server，现在尝试用Consul.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务--路由器(五)</title>
    <link href="http://wangwanchao.wang/2019/06/12/spring-cloud-ribbon/"/>
    <id>http://wangwanchao.wang/2019/06/12/spring-cloud-ribbon/</id>
    <published>2019-06-11T16:53:57.000Z</published>
    <updated>2019-10-10T04:07:46.567Z</updated>
    
    <content type="html"><![CDATA[<p>在wei服务中刚开始使用dubbo通信，后来改为ribbon/feign，feign实际上是在ribbon上又封装了一层</p><a id="more"></a><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在wei服务中刚开始使用dubbo通信，后来改为ribbon/feign，feign实际上是在ribbon上又封装了一层&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java中特殊类Object</title>
    <link href="http://wangwanchao.wang/2019/06/10/java-object/"/>
    <id>http://wangwanchao.wang/2019/06/10/java-object/</id>
    <published>2019-06-10T15:21:14.000Z</published>
    <updated>2019-06-11T11:21:38.481Z</updated>
    
    <content type="html"><![CDATA[<p>Object是所有类的父类。</p><a id="more"></a><p>Object类方法结构：</p><image src="https://impwang.oss-cn-beijing.aliyuncs.com/java/object.png"><h2 id="equals、hashCode"><a href="#equals、hashCode" class="headerlink" title="equals、hashCode"></a>equals、hashCode</h2><h2 id="wait、notify、notifyAll"><a href="#wait、notify、notifyAll" class="headerlink" title="wait、notify、notifyAll"></a>wait、notify、notifyAll</h2><p>原理：<br>obj.wait(), obj.notify()必须在synchronized(obj)语句块内，wait释放对象锁，线程休眠。notify唤醒线程，但不会马上释放对象锁。synchronized执行结束，自动释放锁后，jvm层在持有wait对象锁的线程中随机选取一线程，赋予对象锁，唤醒线程。</p><p>虚假唤醒：</p><p><strong>注意：lost wake up问题</strong> </p><blockquote></blockquote><ol><li>wait/notify/notify必须在锁对象的synchronized同步块内。 因为这三个方法都是释放锁的，如果没有synchronized先获取锁就调用释放锁会引起异常.</li><li>java.util.concurrent.locks.Condition类中的await/signal也必须在同步块内</li></ol><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wait-notify的缺点："><a href="#wait-notify的缺点：" class="headerlink" title="wait/notify的缺点："></a>wait/notify的缺点：</h3><ol><li>线程B通知线程A时，线程A必须在wait调用上等待，否则线程A永远不会被唤醒</li><li>notify只能唤醒一个线程，而notifyAll则唤醒全部线程</li></ol><h3 id="改进方案LockSupport"><a href="#改进方案LockSupport" class="headerlink" title="改进方案LockSupport:"></a>改进方案LockSupport:</h3><image src="https://impwang.oss-cn-beijing.aliyuncs.com/java/LockSupport.png"><p>原理：<br>LockSupport使用：<br>park：等待许可，类似于wait<br>unpark：提供许可，类似于notify<br>park和unpark之间没有时序问题，最底层通过Posix的mutex、condition实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>相同点：</p><ol><li>wait/park都会阻塞线程，释放锁</li><li>上层表现机制不一样，系统层面都是通过<strong>中断</strong>实现</li></ol><p>不同点：</p><ol><li>wait/notify/notifyAll针对的是对象，而且notify不能唤醒某个具体线程；LockSupport可以具体到某一个线程</li><li>实现原理不同，wait/notify基于；LockSupport底层基于Unsafe.park实现</li><li>wait完成同步，需要依赖监视器锁；LockSupport可以使用getBlocker监视锁的持有情况</li></ol></image></image>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object是所有类的父类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://wangwanchao.wang/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>网络中的NAT、P2P</title>
    <link href="http://wangwanchao.wang/2019/06/07/net-nat/"/>
    <id>http://wangwanchao.wang/2019/06/07/net-nat/</id>
    <published>2019-06-07T03:56:03.000Z</published>
    <updated>2019-06-11T15:50:45.242Z</updated>
    
    <content type="html"><![CDATA[<p>网络其实相当有意思，接触NAT主要是在VMware中用到过，一种是懵懵懂懂。</p><a id="more"></a><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>桥接模式，</p><blockquote><p>每个新建的虚拟机系统都是局域网内和宿主机对等的独立主机，<br>需要手动分配一个和宿主机同IP段的IP地址<br>可以访问公网</p></blockquote><h2 id="Host-only"><a href="#Host-only" class="headerlink" title="Host-only"></a>Host-only</h2><p>主机模式，</p><blockquote><p>虚拟环境和宿主真实环境隔离，<br>虚拟机无法访问公网</p></blockquote><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>网络地址转换器，</p><blockquote><p>可以通过宿主机访问公网<br>虚拟机和宿主机可以互相访问，但是和宿主机之外的局域网主机无法互通</p></blockquote><h3 id="Basic-NAT"><a href="#Basic-NAT" class="headerlink" title="Basic NAT"></a>Basic NAT</h3><h3 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h3><p>网络地址-端口转换器</p><h3 id="Cone-NAT"><a href="#Cone-NAT" class="headerlink" title="Cone NAT"></a>Cone NAT</h3><p>锥形NAT</p><h4 id="Full-Cone-NAT"><a href="#Full-Cone-NAT" class="headerlink" title="Full Cone NAT"></a>Full Cone NAT</h4><p>全锥形NAT</p><h4 id="Restricted-Cone-NAT"><a href="#Restricted-Cone-NAT" class="headerlink" title="Restricted Cone NAT"></a>Restricted Cone NAT</h4><p>受限锥形NAT</p><h4 id="Port-Restricted-Cone-NAT"><a href="#Port-Restricted-Cone-NAT" class="headerlink" title="Port-Restricted Cone NAT"></a>Port-Restricted Cone NAT</h4><p>端口受限型NAT</p><h3 id="对称NAT"><a href="#对称NAT" class="headerlink" title="对称NAT"></a>对称NAT</h3><h2 id="P2P通信"><a href="#P2P通信" class="headerlink" title="P2P通信"></a>P2P通信</h2><h3 id="Relaying"><a href="#Relaying" class="headerlink" title="Relaying"></a>Relaying</h3><p>中继</p><h3 id="Connection-reversal"><a href="#Connection-reversal" class="headerlink" title="Connection reversal"></a>Connection reversal</h3><p>逆向连接</p><h3 id="UDP-hole-punching"><a href="#UDP-hole-punching" class="headerlink" title="UDP hole punching"></a>UDP hole punching</h3><p>UDP打洞</p><h4 id="端点在不同的NAT之下"><a href="#端点在不同的NAT之下" class="headerlink" title="端点在不同的NAT之下"></a>端点在不同的NAT之下</h4><h4 id="端点在相同的NAT之下"><a href="#端点在相同的NAT之下" class="headerlink" title="端点在相同的NAT之下"></a>端点在相同的NAT之下</h4><h4 id="固定端口绑定"><a href="#固定端口绑定" class="headerlink" title="固定端口绑定"></a>固定端口绑定</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络其实相当有意思，接触NAT主要是在VMware中用到过，一种是懵懵懂懂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NetWork" scheme="http://wangwanchao.wang/tags/NetWork/"/>
    
  </entry>
  
  <entry>
    <title>Redis概览(一)</title>
    <link href="http://wangwanchao.wang/2019/06/07/redis-base/"/>
    <id>http://wangwanchao.wang/2019/06/07/redis-base/</id>
    <published>2019-06-06T16:25:54.000Z</published>
    <updated>2019-10-12T03:16:07.417Z</updated>
    
    <content type="html"><![CDATA[<p>Redis作为NoSQL数据库，第一次接触就感觉简直让人惊艳</p><a id="more"></a><h2 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h2><h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis作为NoSQL数据库，第一次接触就感觉简直让人惊艳&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://wangwanchao.wang/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis中的跳表(二)</title>
    <link href="http://wangwanchao.wang/2019/06/07/redis-skiplist/"/>
    <id>http://wangwanchao.wang/2019/06/07/redis-skiplist/</id>
    <published>2019-06-06T16:25:35.000Z</published>
    <updated>2019-06-06T16:27:14.851Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Redis" scheme="http://wangwanchao.wang/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis哨兵机制(七)</title>
    <link href="http://wangwanchao.wang/2019/06/07/redis-election/"/>
    <id>http://wangwanchao.wang/2019/06/07/redis-election/</id>
    <published>2019-06-06T16:18:30.000Z</published>
    <updated>2019-06-06T17:58:45.458Z</updated>
    
    <content type="html"><![CDATA[<p>redis引入了哨兵机制</p><a id="more"></a><h2 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h2><h3 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h3><p>启动哨兵机制，可以对主从数据库进行监控</p><h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><p>启动多个哨兵(建议3个，并且使用奇数个哨兵)，可以对主从数据库进行监控，哨兵之间也可以互相通信。<br>哨兵主要功能：</p><ol><li>监控：监控master和slave是否运行正常</li><li>提醒：某个redis出现故障，可以发起通知</li><li>自动故障转移：当一个master不能正常工作时，将master下其中一个slave转为master</li></ol><p>补充：为什么哨兵至少3个？</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个哨兵会向其它哨兵、master、slave定时发送消息，保持心跳。如果指定时间未回应，则认为对方<strong>主观下线</strong>；若多数哨兵都认为某一服务没响应，则认为<strong>客观下线</strong></p><h2 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h2><p>用于接收master是否下线的消息</p><h2 id="选举master协议"><a href="#选举master协议" class="headerlink" title="选举master协议"></a>选举master协议</h2><p>用来决定是否执行故障转移，以及slave中的选主<br>选主会有两个过程：</p><h3 id="Sentinel哨兵选出leader"><a href="#Sentinel哨兵选出leader" class="headerlink" title="Sentinel哨兵选出leader"></a>Sentinel哨兵选出leader</h3><p>当某个哨兵节点确认master主管下线后，发出广播请求其它哨兵选举自己为leader，<br>被请求的哨兵如果没有选举过其它哨兵的请求，则同意该请求，否则不同意<br>当哨兵节点票数达到Max(quorum, num(sentinel)/2 + 1)，则升级为leader</p><h3 id="Sentinel-Leader选举主节点master"><a href="#Sentinel-Leader选举主节点master" class="headerlink" title="Sentinel Leader选举主节点master"></a>Sentinel Leader选举主节点master</h3><p>master选举：</p><image src="https://impwang.oss-cn-beijing.aliyuncs.com/redis/redis-leader.png"><p>slave-priority在conf中配置</p></image>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis引入了哨兵机制&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://wangwanchao.wang/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>etcd-raft</title>
    <link href="http://wangwanchao.wang/2019/06/06/etcd-raft/"/>
    <id>http://wangwanchao.wang/2019/06/06/etcd-raft/</id>
    <published>2019-06-06T15:05:56.000Z</published>
    <updated>2019-06-06T15:05:56.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
