<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangsir&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangwanchao.wang/"/>
  <updated>2019-06-04T16:42:43.138Z</updated>
  <id>http://wangwanchao.wang/</id>
  
  <author>
    <name>wanchao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis概览(一)</title>
    <link href="http://wangwanchao.wang/2019/06/04/mybatis-base/"/>
    <id>http://wangwanchao.wang/2019/06/04/mybatis-base/</id>
    <published>2019-06-04T12:30:05.000Z</published>
    <updated>2019-06-04T16:42:43.138Z</updated>
    
    <content type="html"><![CDATA[<p>终究还是要自己来分析源码了，网上有很多MyBatis的源码分析，自己决定做，一来是加深印象；二来摸索源码分析的方法论。很多时候看源码一脸懵逼，不知道该从哪里看，看完没有形成思路。</p><a id="more"></a><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>mybatis结构图：</p><p><img width="200" height="300" src="https://impwang.oss-cn-beijing.aliyuncs.com/mybatis/mybatis-arc.png"></p><p>在我看来mybatis核心功能主要有3个：<br>1、xml/注解的解析(包括config配置、mapper)<br>2、一级缓存，二级缓存<br>3、事务</p><h2 id="MyBatis和Spring整合"><a href="#MyBatis和Spring整合" class="headerlink" title="MyBatis和Spring整合"></a>MyBatis和Spring整合</h2><p>mybatis和Spring整合插件结构图：</p><p><img width="200" height="300" src="https://impwang.oss-cn-beijing.aliyuncs.com/mybatis/mybatis-spring.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终究还是要自己来分析源码了，网上有很多MyBatis的源码分析，自己决定做，一来是加深印象；二来摸索源码分析的方法论。很多时候看源码一脸懵逼，不知道该从哪里看，看完没有形成思路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://wangwanchao.wang/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis缓存(三)</title>
    <link href="http://wangwanchao.wang/2019/06/04/mybatis-cache/"/>
    <id>http://wangwanchao.wang/2019/06/04/mybatis-cache/</id>
    <published>2019-06-04T12:28:52.000Z</published>
    <updated>2019-06-04T16:26:53.125Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis分为一级缓存、二级缓存</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis分为一级缓存、二级缓存&lt;/p&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://wangwanchao.wang/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis中的事务管理(五)</title>
    <link href="http://wangwanchao.wang/2019/06/04/mybatis-transaction/"/>
    <id>http://wangwanchao.wang/2019/06/04/mybatis-transaction/</id>
    <published>2019-06-04T12:28:37.000Z</published>
    <updated>2019-06-04T16:28:33.241Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://wangwanchao.wang/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>微服务--服务编排</title>
    <link href="http://wangwanchao.wang/2019/06/03/servicemesh-serverless/"/>
    <id>http://wangwanchao.wang/2019/06/03/servicemesh-serverless/</id>
    <published>2019-06-03T03:42:30.000Z</published>
    <updated>2019-06-03T06:32:14.539Z</updated>
    
    <content type="html"><![CDATA[<p>服务编排</p><a id="more"></a><h2 id="Dubbo-SpringCloud"><a href="#Dubbo-SpringCloud" class="headerlink" title="Dubbo/SpringCloud"></a>Dubbo/SpringCloud</h2><h2 id="ServiceMesh"><a href="#ServiceMesh" class="headerlink" title="ServiceMesh"></a>ServiceMesh</h2><p>服务网格</p><p>Linkerd/Envoy</p><p>Istio</p><h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>无服务器架构</p><p>Knative</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务编排&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Maven依赖冲突问题</title>
    <link href="http://wangwanchao.wang/2019/06/03/maven-conflict/"/>
    <id>http://wangwanchao.wang/2019/06/03/maven-conflict/</id>
    <published>2019-06-03T02:45:33.000Z</published>
    <updated>2019-06-03T06:36:43.132Z</updated>
    
    <content type="html"><![CDATA[<p>maven依赖冲突</p><a id="more"></a><h3 id="冲突分类："><a href="#冲突分类：" class="headerlink" title="冲突分类："></a>冲突分类：</h3><p>第一类Jar包问题：依赖的同一个Jar出现不同的版本。<br>第二类Jar包问题：同样的类Class出现在多个不同的Jar包中。</p><h3 id="冲突原因："><a href="#冲突原因：" class="headerlink" title="冲突原因："></a>冲突原因：</h3><p>maven的依赖机制：<br>优先按照依赖管理<dependencymanagement>元素中指定的版本声明进行仲裁，此时下面的两个原则都无效了<br>若无版本声明，则按照“短路径优先”的原则（Maven2.0）进行仲裁，即选择依赖树中路径最短的版本<br>若路径长度一致，则按照“第一声明优先”的原则进行仲裁，即选择POM中最先声明的版本</dependencymanagement></p><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><h4 id="1、依赖管理"><a href="#1、依赖管理" class="headerlink" title="1、依赖管理"></a>1、依赖管理</h4><p>针对第一类冲突<br>方法1）通过<excludes>排除传递依赖<br>方法2）使用<dependencymanagement>对依赖包统一版本管理</dependencymanagement></excludes></p><h3 id="2、冲突检测插件"><a href="#2、冲突检测插件" class="headerlink" title="2、冲突检测插件"></a>2、冲突检测插件</h3><p>针对第二类冲突<br>maven-enforcer-plugin插件 + extra-enforcer-rules工具，注意：应用在子模块上，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;maven依赖冲突&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://wangwanchao.wang/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>断路器hystrix</title>
    <link href="http://wangwanchao.wang/2019/06/03/architecture-hystrix/"/>
    <id>http://wangwanchao.wang/2019/06/03/architecture-hystrix/</id>
    <published>2019-06-03T02:18:27.000Z</published>
    <updated>2019-06-04T13:09:44.530Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--异常控制流</title>
    <link href="http://wangwanchao.wang/2019/06/01/csapp-exception/"/>
    <id>http://wangwanchao.wang/2019/06/01/csapp-exception/</id>
    <published>2019-06-01T15:47:09.000Z</published>
    <updated>2019-06-03T02:19:28.580Z</updated>
    
    <content type="html"><![CDATA[<p>异常</p><a id="more"></a><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>异常控制流：现代系统通过使控制流发生突变来对这些情况做出反应，这些突变称为异常控制流。</p><p>异常：控制流中的突变。一部分由硬件实现，一部分由操作系统实现。</p><p>异常号：系统中可能的每种类型的异常都分配了一个唯一的非负整数，称为异常号。</p><blockquote><p>其中一些异常号由CPU设计中分配。例如：被零除、缺页、内存访问违例、断点、算术运算溢出<br>其它号码由操作系统内核的设计者分配。例如：系统调用、来自外部I/O设备的信号</p></blockquote><p>异常表：系统启动时，分配和初始化一张跳转表，称为异常表。表中维护了异常号-异常处理程序地址的关系。异常表的起始地址放在一个‘异常表基址寄存器’的特殊CPU寄存器内。</p><h3 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h3><table><thead><tr><th>类别</th><th style="text-align:center">原因</th><th style="text-align:center">异步/同步</th><th style="text-align:center">返回行为</th></tr></thead><tbody><tr><td>中断</td><td style="text-align:center">来自I/O设备的信号</td><td style="text-align:center">异步</td><td style="text-align:center">总是返回到下一条指令</td></tr><tr><td>陷阱</td><td style="text-align:center">有意的异常。</td><td style="text-align:center">同步</td><td style="text-align:center">总是返回到下一条指令</td></tr><tr><td>故障</td><td style="text-align:center">潜在的可恢复的错误</td><td style="text-align:center">同步</td><td style="text-align:center">可能返回到当前指令</td></tr><tr><td>终止</td><td style="text-align:center">不可恢复的错误</td><td style="text-align:center">同步</td><td style="text-align:center">不会返回</td></tr></tbody></table><h4 id="故障指令"><a href="#故障指令" class="headerlink" title="故障指令"></a>故障指令</h4><p>陷阱(系统调用)：普通程序运行在<code>用户模式</code>，系统调用运行在<code></code>内核模式<code>，系统为用户提供了特殊的</code>syscall n`指令，用户进行系统调用时进入陷阱模式。</p><p>故障：故障是由错误引起的，如果错误可以被修复，则将控制返回到引起故障的指令；如果不可修复，则返回到内核中的abort例程，abort例程会终止引起故障的应用程序。</p><p>终止：由不可恢复的致命错误引起，通常是一些硬件错误。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h3><p>并发流：并发流的思想与流运行的CPU核数、计算机数无关。</p><p>并行流：</p><h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><p>进程间内存空间私有</p><h3 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h3><p>模式位：CPU通过设置某个寄存器的模式位，指定进程处于内核模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://wangwanchao.wang/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--CPU</title>
    <link href="http://wangwanchao.wang/2019/06/01/csapp-cpu/"/>
    <id>http://wangwanchao.wang/2019/06/01/csapp-cpu/</id>
    <published>2019-06-01T04:27:49.000Z</published>
    <updated>2019-06-03T02:46:14.477Z</updated>
    
    <content type="html"><![CDATA[<p>决定计算机性能的3个关键因素：</p><blockquote><p>指令数目 (编译器和指令集决定)<br>时钟周期长度 (CPU决定)<br>每条指令所需要的时钟周期数 (CPU决定)</p></blockquote><a id="more"></a><h2 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h2><h3 id="1-组合单元："><a href="#1-组合单元：" class="headerlink" title="1. 组合单元："></a>1. 组合单元：</h3><h3 id="2-状态单元："><a href="#2-状态单元：" class="headerlink" title="2. 状态单元："></a>2. 状态单元：</h3><p>两个输入 + 一个输出<br>    输入：<br>    写入单元的数据值<br>    决定何时写入的时钟信号</p><p>时钟方法：规定信号可以独处和写入的时间<br>    边沿触发的时钟</p><p>寄存器堆：寄存器集合，存放32个通用寄存器<br>    R型指令：<code>add $t1, $t2, $t3</code></p><h2 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h2><p>指令执行顺序：<br>取指<br>译码<br>执行<br>访存<br>写回<br>更新PC</p><h3 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h3><ol><li><p>结构冒险</p></li><li><p>数据冒险</p></li><li><p>控制冒险(分支冒险)：</p><p> 解决方法：</p><blockquote><p>阻塞<br>预测<br>延迟决定</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;决定计算机性能的3个关键因素：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指令数目 (编译器和指令集决定)&lt;br&gt;时钟周期长度 (CPU决定)&lt;br&gt;每条指令所需要的时钟周期数 (CPU决定)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://wangwanchao.wang/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>talk-in-wangxiaobo</title>
    <link href="http://wangwanchao.wang/2019/05/31/talk-in-wangxiaobo/"/>
    <id>http://wangwanchao.wang/2019/05/31/talk-in-wangxiaobo/</id>
    <published>2019-05-31T13:24:40.000Z</published>
    <updated>2019-05-31T13:24:40.420Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>csapp-lab</title>
    <link href="http://wangwanchao.wang/2019/05/31/csapp-lab/"/>
    <id>http://wangwanchao.wang/2019/05/31/csapp-lab/</id>
    <published>2019-05-31T09:06:20.000Z</published>
    <updated>2019-05-31T09:06:20.615Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--指令集</title>
    <link href="http://wangwanchao.wang/2019/05/31/csapp-instructions/"/>
    <id>http://wangwanchao.wang/2019/05/31/csapp-instructions/</id>
    <published>2019-05-31T06:46:13.000Z</published>
    <updated>2019-06-01T04:28:48.700Z</updated>
    
    <content type="html"><![CDATA[<p>MIPS的2种实现方式：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MIPS的2种实现方式：&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于失去</title>
    <link href="http://wangwanchao.wang/2019/05/30/thinking-in-lost/"/>
    <id>http://wangwanchao.wang/2019/05/30/thinking-in-lost/</id>
    <published>2019-05-30T15:04:29.000Z</published>
    <updated>2019-05-30T15:54:44.056Z</updated>
    
    <content type="html"><![CDATA[<p>关于失去，说是老了也好，说是闲的也好，总之，这一刻，因为一些人，一些事儿。总想说点什么。</p><a id="more"></a><p>自从开始写代码这个行业，大多的时间忙于各种新技术的更新换代，怕自己被淘汰，就陷于无尽的焦虑当中。很少有时间享受读一本书，出去骑行的慢时光。即便这样，仍然面临被很多人拍死在沙滩上的处境。<br>最近得闲，因为某种原因，李志的专辑被全平台下线，网上遍寻，有幸发现一个网站《麦田音乐网》，这是一个运营了十多年的网站，而且是个人运营，很是惊讶，竟然还有这种佛系的地方。<br>大致浏览了一下，猜测站长应该是个很厉害、又有点文艺的人，我看大家称呼他鬼哥。网站中除了歌单，最精彩的地方是，还有个麦游记，然后就有很多人会写下自己的故事，感觉类似于那个很有创意的淘宝卖家《CY故事 • 一家卖故事的淘宝店》(有点忘了，可以去查了一下)，这些故事总能触动内心深处的某些东西。</p><p>网站有个很醒目的flag：”我没法像个农民那样善良，只是麦子还在对着太阳愤怒生长”，第一印象就是《麦田里的守望者》，然后一层一层的“扒光”，在留言本的地方，站长的：</p><blockquote><p>欢迎来到“麦田音乐网”，如果您有什么想说的话，请在这里留言！<br>麦田音乐网建于2006年，是一个简单纯粹的音乐、文字分享网站。<br>在浮躁、喧嚣的互联网中，希望你能在这里静下来。<br>网站取名于《麦田里的守望者》、《小王子》、海子的诗、梵高与麦田。<br>站长QQ:40589302 微信:linfox<br>微信公众号“麦音乐”：maiyinyue<br>不换友情链接。</p></blockquote><p>留言本下有些留言真的是别有意味，这种感觉恐怕就是旧友久别重逢而不曾遗忘的感觉吧。</p><blockquote><p>猪诺 2019-01-29    11:42 上午<br>初中时开始听，现在我研三即将毕业。一晃这么多年。<br>QQ上还加着你，但是QQ已经不用了。<br>走了好久，发现麦田还在，真好。</p></blockquote><p>在留言本后还有个淘宝店铺，也是十多年的老店，打开店铺，果然做生意也是很佛系的，我比较喜欢的是里面的文化衫，”grunge is dead”，”we are young”。真是一个很有趣的人。</p><p>总之，这是一个很有内容的网站，作为一个技术人，接触了太多的网站，这算是网站中的一股清流了。<br>意犹未尽之余，去查了一下”伍尔芙”，著名的一句话–你不能通过逃避生活以寻找安宁，有机会读一下《海浪》；<br>“科特柯本”，摇滚乐、朋克，这些东西没有系统的了解过，瞬间感觉自己的孤陋寡闻，不禁反思“我究竟是个有趣的人吗？”，因为最近也在读王小波，颇多感慨，也许自己还是太晚熟了，失去了太多宝贵的时间；<br>“麦田里的守望者”，这本书其实很早有了解，但是一直没读过，去豆瓣了解了一下，中间刘瑜老师在2009年的一条评论还是令人深思的，的确，生活有美好，也有颓废，但是不能只看到颓废。然后打开刘瑜老师的个人博客，域名早已变成一个机械公司的网站…</p><p>生活，究竟是什么？可能我们每个人都问过自己，也在不断的寻找答案，尤其是这个快速迭代的时代，很多的东西终会被新的事物掩盖，但是她的美好，或者对她的依恋，却仍然在散发着光辉。</p><p>就好像这个网站，有一天会不会突然不能用了？我不知道，但我会尽力维护下去，当成一种信仰。我想要看清这个世界！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于失去，说是老了也好，说是闲的也好，总之，这一刻，因为一些人，一些事儿。总想说点什么。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://wangwanchao.wang/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--并发和并行</title>
    <link href="http://wangwanchao.wang/2019/05/29/csapp-concurrent/"/>
    <id>http://wangwanchao.wang/2019/05/29/csapp-concurrent/</id>
    <published>2019-05-29T12:56:35.000Z</published>
    <updated>2019-05-29T15:30:34.482Z</updated>
    
    <content type="html"><![CDATA[<p>看了一遍，感觉并没有解释的很深刻，也许是自己理解的问题。</p><a id="more"></a><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>现代操作系统构建并发程序的方式：</p><ol><li>进程<br> 接收到请求后，fork一个子进程，由子进程来处理任务。因为每个进程的虚拟内存空间是独立的，所以进程间通信需要显式进行。常见的有：<br> 优点：共享文件表，不共享用户地址空间<br> 缺点：通信困难</li></ol><ol start="2"><li><p>I/O多路复用模型<br> 由select来监听接收请求，没有数据时CPU挂起，只有发生I/O事件时，才会处理。状态机模型，流之间的通信通过状态实现。例如：jdk的NIO模型、Netty的I/O模型</p><p> 改进：基于多路复用的事件驱动模型</p><p> 状态机模型：</p><pre><code>状态：等待描述符 $d_i$ 准备好可读，是否可读就是一种true/false的状态输入事件：描述符 $d_i$ 准备好可读，其实就是一个触发事件转移：从描述符 $d_i$ 读取数据，即状态转移，</code></pre><p> 优点：处于同一进程内，所有的流可以共享该进程的全部地址空间<br> 缺点：编码复杂度上升</p></li><li><p>线程<br> 多个线程在单一进程中，由内核统一调度，像进程一样，但是共享进程的虚拟内存空间。<br> 每个线程有自己的执行上下文，线程代码和局部数据被封装在一个线程例程中。每个独立的线程中的线程栈通常不能被其它线程访问，除非线程得到指向其他线程的访问指针。除此之外，线程中的全局变量、静态变量只存在进程的虚拟内存中，可以被其它线程访问</p><p> Posix线程：在C程序中处理线程的一个标准接口</p><p> 可结合线程：线程能够被其它线程收回和杀死，内存也可以被其它线程回收。<br> 可分离线程：线程不能够被其它线程收回和杀死，内存由系统管理</p></li></ol><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>共享变量存在线程安全的问题，可以使用一种进度图模型分析指令执行顺序问题。然后引入了信号量机制</p><h3 id="进度图"><a href="#进度图" class="headerlink" title="进度图"></a>进度图</h3><p>进度图：n个并发线程的执行模型。进度图模型存在局限性，多处理器并发执行，不能使用进度图解释<br>临界区：</p><p>互斥</p><p>不安全区</p><p>安全轨迹<br>不安全轨迹</p><h3 id="信号量-1"><a href="#信号量-1" class="headerlink" title="信号量"></a>信号量</h3><p>主要包含2个操作P(s)、V(s)，<br>P(s): 对s减1。如果s非0，则执行P线程s减1，否则P挂起，等待V唤醒<br>V(s): 对s加1。V可以重启P线程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了一遍，感觉并没有解释的很深刻，也许是自己理解的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://wangwanchao.wang/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--概览</title>
    <link href="http://wangwanchao.wang/2019/05/29/csapp-base/"/>
    <id>http://wangwanchao.wang/2019/05/29/csapp-base/</id>
    <published>2019-05-29T12:07:05.000Z</published>
    <updated>2019-06-01T04:06:01.414Z</updated>
    
    <content type="html"><![CDATA[<p>2014年就接触CSAPP，一直拖一直拖，直到今天才决定完完整整深耕，并产生输出。无论什么原因吧，种一棵树的最好时机就是十年前，还有就是今天。</p><a id="more"></a><h2 id="7-操作系统"><a href="#7-操作系统" class="headerlink" title="7. 操作系统"></a>7. 操作系统</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统：处于应用程序和底层硬件之间，对应用程序提供API接口。例如Windows、Linux、MacOS等。</p><p>主要的作用：</p><blockquote><p>防止硬件被应用程序随意调用<br>提供统一的接口。因为底层硬件商不同，内部实现也不一样，操作系统对所有的硬件提供一个统一的实现标准</p></blockquote><p>标准：<br>    Unix：贝尔实验室开发的一套系统<br>    Posix标准：IEEE为了规范Unix的开发，制定了一些标准。系统调用的C语言接口、shell程序、工具、线程、网络编程<br>    标准Unix规范：”标准Unix规范”工作组和Posix一起创建的Unix系统标准</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件：对I/O设备的抽象</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存：对主存、磁盘等I/O设备的抽象，和文件的描述存在交集，很难说谁包含谁</p><p>虚拟内存分为<br>内核虚拟内存：存储操作系统的代码和数据，对所有进程不可见<br>进程虚拟内存：存放所有进程信息</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程：对处理器、主存、磁盘I/O的抽象</p><p>进程是对操作系统中正在运行的程序的一种抽象。<br>计算机CPU分单核、多核，即使一个CPU，看起来好像并发执行多个进程，实际上内部是通过进程间切换实现的，即’上下文切换’</p><p>上下文：进程在运行状态下，操作系统会维护进程所有的信息(主存内容、寄存器文件的当前值)。进程各自的这些信息就是上下文。</p><p>上下文切换：每个CPU每个时刻只能有一个进程运行，把CPU的控制权交给别的进行，换取CPU的进程可以继续上次的执行，进程间运行的切换就是上下文切换</p><p>线程：一个进程可以由多个线程组成，每个线程运行在进程的上下文中，共享同样的代码和全局变量。</p><h4 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h4><p>并发运行：</p><p>并行运行：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014年就接触CSAPP，一直拖一直拖，直到今天才决定完完整整深耕，并产生输出。无论什么原因吧，种一棵树的最好时机就是十年前，还有就是今天。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://wangwanchao.wang/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>关于今天某思面试的思考</title>
    <link href="http://wangwanchao.wang/2019/05/29/thinking-in-20190529/"/>
    <id>http://wangwanchao.wang/2019/05/29/thinking-in-20190529/</id>
    <published>2019-05-29T10:53:24.000Z</published>
    <updated>2019-05-29T17:18:12.494Z</updated>
    
    <content type="html"><![CDATA[<p>今天下午参加了某思的面试，天挺热的，某思去了两次，第一次面到总监，莫名其妙的杳无音讯。这次是第二次。<br>面试过程前HR提前说明了面试官喜欢问算法，也没怎么准备，只是为了白板，简单看了一下基础的算法。</p><a id="more"></a><p>面试中因为面试官看到我不是科班出身，就问了我两道题，一道关于系统中进程和线程，我答的不是很好，面试官说再考考你的基础，就出了一道算法题，大约五分钟后，</p><blockquote><p>面试官问我有思路吗，<br>其实这个并不难，我就把思路大致讲了一下，<br>然后面试官就要结束，习惯性的说，你还有什么要问我的吗<br>我说，我表现很差吗？<br>接着，他说不问上层应用层的东西，比较注重基础 blablabla…<br>我接着问，这道算法题是有什么模式吗？您是怎么做的？<br>其实这个，blabla…讲了一堆<br>我说，我这个用Map有问题吗？<br>你这个主要是太占空间(这时候，我其实很无奈，就是一个优化的问题，但是我也没办法)<br>然后，我说前辈有什么要指导的吗？<br>你既然是非科班出身，就应该在一年内把计算机系统、编译原理、数据结构、网络这些都学习一下(此时，我知道面试官只是对我的出身比较有看法吧，所谓的这几道题无非是不显得那么明显)</p></blockquote><p>面试出来，我知道这个行业门槛越来越高，而我们这些非科班出身的人，未来的路将越来越难走，我觉得自己在这个级别上，表现并没有那么差，但是依然会有人用自己的偏见去看待这一切。</p><p>虽然有点不甘，但是给自己加油吧！希望未来的自己越来越强大！</p><p>拆分目标，把每年的计划拆分到每个月，每一周，然后不断的复盘，总结，看看自己能不能突破当前的桎梏</p><p>6月计划：</p><p>一、读完《CSAPP》，并整理出博客</p><p>二、读完《HTTP/IP详解卷1》，并整理出博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天下午参加了某思的面试，天挺热的，某思去了两次，第一次面到总监，莫名其妙的杳无音讯。这次是第二次。&lt;br&gt;面试过程前HR提前说明了面试官喜欢问算法，也没怎么准备，只是为了白板，简单看了一下基础的算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://wangwanchao.wang/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>网络中的网桥、交换机、集线器</title>
    <link href="http://wangwanchao.wang/2019/05/29/net-hub-bridge-switch/"/>
    <id>http://wangwanchao.wang/2019/05/29/net-hub-bridge-switch/</id>
    <published>2019-05-29T10:47:19.000Z</published>
    <updated>2019-05-29T10:49:22.732Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="net" scheme="http://wangwanchao.wang/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统--I/O</title>
    <link href="http://wangwanchao.wang/2019/05/29/csapp-io/"/>
    <id>http://wangwanchao.wang/2019/05/29/csapp-io/</id>
    <published>2019-05-29T10:33:03.000Z</published>
    <updated>2019-05-29T15:41:15.586Z</updated>
    
    <content type="html"><![CDATA[<p>看了CSAPP中关于I/O部分，感觉找不到重点，又浏览了一下《Linux内核设计与实现》，总感觉缺点意思，下一步希望能够结合《计算机组成与设计》分析一下</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了CSAPP中关于I/O部分，感觉找不到重点，又浏览了一下《Linux内核设计与实现》，总感觉缺点意思，下一步希望能够结合《计算机组成与设计》分析一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSAPP" scheme="http://wangwanchao.wang/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>go-iris-websocket</title>
    <link href="http://wangwanchao.wang/2019/05/27/go-iris-websocket/"/>
    <id>http://wangwanchao.wang/2019/05/27/go-iris-websocket/</id>
    <published>2019-05-27T08:44:00.000Z</published>
    <updated>2019-05-27T08:44:00.431Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dart和Flutter的那些事儿</title>
    <link href="http://wangwanchao.wang/2019/05/27/flutter-base/"/>
    <id>http://wangwanchao.wang/2019/05/27/flutter-base/</id>
    <published>2019-05-27T08:38:24.000Z</published>
    <updated>2019-05-27T08:44:25.303Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter是一门</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter是一门&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="flutter" scheme="http://wangwanchao.wang/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>对一些事情的思考</title>
    <link href="http://wangwanchao.wang/2019/05/04/thinking-in-youthday/"/>
    <id>http://wangwanchao.wang/2019/05/04/thinking-in-youthday/</id>
    <published>2019-05-04T03:56:42.000Z</published>
    <updated>2019-05-27T08:27:59.379Z</updated>
    
    <content type="html"><![CDATA[<p>从2019-04-22开始第一次面试，到现在半个月的时间。个中经历不用言语，最大的感受就是发现自己越来越菜，需要学习的东西越来越多。</p><p>从五一开始也一直在整理收藏的技术博客，面试中很多东西说不明白，终究还是没有真正明白。每次面对面试官无法回答问题，都感觉好尴尬，默默地骂自己一句：“辣鸡”。</p><a id="more"></a><p>针对面试的弱点主要以下几点：</p><p>1、缺乏深入</p><p>很多知识点，只能说个大概，底层的概念很模糊。</p><p>将来要循序渐进的对弱点进行源码分析，分析源码可以更好的成长。</p><p>2、对新技术缺乏认识。</p><p>分布式、高并发、JVM调优，这些虽然很少接触，还是要抽时间模拟实践一下。</p><p>要能实现基本的Demo，才算对新技术的简单了解</p><p>3、坚持算法</p><p>算法和实际工作关系不大，但是刷算法能保证不断的思考，加深问题的分析能力</p><p>每天坚持算法</p><p>今年的目标就是把知识点串成面，写出精品，而不是每天制造垃圾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2019-04-22开始第一次面试，到现在半个月的时间。个中经历不用言语，最大的感受就是发现自己越来越菜，需要学习的东西越来越多。&lt;/p&gt;
&lt;p&gt;从五一开始也一直在整理收藏的技术博客，面试中很多东西说不明白，终究还是没有真正明白。每次面对面试官无法回答问题，都感觉好尴尬，默默地骂自己一句：“辣鸡”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://wangwanchao.wang/tags/life/"/>
    
  </entry>
  
</feed>
